Chroma Scopes post draft ---

The problem:
    - Accurate color correction and grading requires tools to help
    - Still image processing applications like Photoshop do not offer such tools, unlike apps for video
    - Nor are there any usable plugins for it
    - With this project I set out to change that

Choosing Javascript:
    - Photoshop has multiple plugin API's, including the old C++ and ... one, and the new UXP.
    - Since UXP is being touted as the new standard and should be cross platform as it's using javascript, I went this route
    - However, UXP uses limited HTML, CSS, and Javascript freatures and had no WebGL support when I tried (and probably to this day)
    - This meant that displaying potentially millions of particles would have been challenging

Early prototypes:
    - Since UXP uses Javascript and currently the easiest to use cross-platform technology is a browser I build a web app
    that communicated through Websockets with Photoshop
    - Websockets thankfully is supported by UXP
    - Browser does not feel native enough, so moving to Electron was the reasonable next step (gives native feel as well)
    - Unfortunately, WebGL does not support Compute Shaders which are quite important for complicated scopes like vectorscope and histogram
    
Going fully native:
    - Switching stack to C++ and modern OpenGL -- this provides cross-platform compatibility (deprecated on Mac, though) with
    compute shader support
    - Still communicating with websockets whereas shared memory would probably be better
    - Using DearImGui modified for UI
    - Closed beta is created for mac and windows

Photoshop error 1000:
    - Thanks to the limited documentation for the "new" UXP api in Photoshop the current configuration uses polling
    to see if anything changed about the document
    - This leads to Photoshop Error 1000 sometimes which is an error code that is generic and has no actual described meaning
    - After some extra digging a method is found for listening for change events and the error is gone
    - But performance is still question and the UXP api is very rigid

Time for a new start
    - Sometimes software needs to be written in a narrow way but written well with the possibility of later broading it
    - Therefore, the next iteration of the scopes app uses C and D3D11 targeting windows platforms exclusively
    - However, it uses screen capture instead of websocket communication so it is becoming an application capable of
    interfacing with not just photoshop but any visual application appearing on the screen
    - This is the current chroma scopes -- performant, native, and lightweight
